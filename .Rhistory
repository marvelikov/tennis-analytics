ngames <- length(Teams)/2
nround <- 4 - log2(ngames)
offset <- c(0,3,9,21)
skip <- c(0,6,18,0)
col <- (nround - 1) * 26
for(k in 1:ngames){
for(j in 1:2){
i <-  j +(k-1)*2
row <-  4 + (k-1)*6 + (j-1)*2 + offset[nround]  + skip[nround]*(k-1)
#Seed Box
pushViewport(viewport(layout.pos.col = col + 1:3, layout.pos.row = row:(row+1)))
grid.rect(gp=gpar(col="gray", fill="cornsilk"))
grid.text(Seeds[i],gp=gpar(fontsize=9, col=gray(0.1)))
popViewport()
#Name Box
pushViewport(viewport(layout.pos.col = col + 4:21, layout.pos.row = row:(row+1)))
grid.rect(gp=gpar(col="gray", fill="cornsilk"))
if(j == 1 && (Scores[i] > Scores[i+1]))
grid.text(Teams[i],gp=gpar(fontsize=9, fontface="bold",col=gray(0.1)))
else if(j == 2 && (Scores[i] > Scores[i-1]))
grid.text(Teams[i],gp=gpar(fontsize=9, fontface="bold",col=gray(0.1)))
else
grid.text(Teams[i],gp=gpar(fontsize=9, col=gray(0.1)))
popViewport()
#Score Box
pushViewport(viewport(layout.pos.col = col + 21:23, layout.pos.row = row:(row+1)))
grid.rect(gp=gpar(col="gray", fill="cornsilk"))
grid.text(Scores[i],gp=gpar(fontsize=9, col=gray(0.1)))
popViewport()
}
}
}
# Seeded Team Names and other initializations
Teams <- paste("Team", 1:16,sep=" ")
Seeds <- c(1,16,8,9,5,12,4,13,6,11,3,14,7,10,2,15)
Scores <- sample(50:95,16)
for(round in 1:4){
PlotRound(Teams,Seeds,Scores)
ngames <- length(Teams)/2
odd <- (1:ngames)*2 - 1
even  <- (1:ngames)*2
W <- ifelse(diff(Scores)[odd] < 0,odd,even)
Teams <- Teams[W]
Seeds <- Seeds[W]
Scores <- sample(50:95,length(Teams))
}
require(readxl)
data <- read_xlsx("Data/MR-BO-2016.xlsx")
View(data)
data <- read_xlsx("Data/MR-BO-2016.xlsx", na = "NA")
data <- read_xlsx("Data/MR-BO-2016.xlsx")
View(data)
data_tennis <- read_xlsx("Data/MR-BO-2016.xlsx")
data_1st <- data_tennis[which(data_tennis$ATP == 1)]
data_1st
data_1st
data_tennis$ATP == 1
data_1st <- data_tennis[which(data_tennis$ATP == 1),]
View(data)
View(data_1st)
unique(data_1st$Round)
View(data)
which(data_tennis$Tournament == "Wimbeldon")
which(data_tennis$Tournament == "London")
which(data_tennis$Tournament == "Wimbledon")
unique(data_tennis[which(data_tennis$Tournament == "Wimbledon"),]$Round)
order_round <- c("1st Round", "2nd Round", "3rd Round", "4th Round", "Quarterfinals", "Semifinals", "The Final")
data_1st$Round <- factor(data_1st$Round, levels = order_round)
data_1st
View(data_1st)
round = "1st Round"
round_number <- which(order_round == round)
round_number
which(data_1st$Round == order_round[(round_number + 1), ]
which(data_1st$Round == order_round[(round_number + 1), ])
which(data_1st$Round == order_round[(round_number + 1), ])
which(data_1st$Round == order_round[(round_number + 1), ])
order_round[(round_number + 1), ]
round_number
order_round[(round_number + 1),]
order_round[(round_number + 1)]
which(data_1st$Round == order_round[(round_number + 1)])
data_1st[which(data_1st$Round == order_round[(round_number + 1)])]
data_1st[which(data_1st$Round == order_round[(round_number + 1)]),]
names(data_1st)
col_match <- which(names(data_1st) %in% c("Winner", "Loser"))
col_match
order_prev_round <- sapply(X = data_1st[which(data_1st$Round == order_round[(round_number + 1)]), col_match])
data_1st[which(data_1st$Round == order_round[(round_number + 1)]), col_match]
order_prev_round <- sapply(X = data_1st[which(data_1st$Round == order_round[(round_number + 1)]), col_match], FUN = function(x) {c(x)})
order_prev_round
unlist(data_1st[which(data_1st$Round == order_round[(round_number + 1)]), col_match])
unlist(data_1st[which(data_1st$Round == order_round[(round_number + 1)]), col_match], use.names = FALSE)
c(t(data_1st[which(data_1st$Round == order_round[(round_number + 1)]), col_match]))
data_1st[which(data_1st$Round == order_round[(round_number + 1)]), col_match])
data_1st[which(data_1st$Round == order_round[(round_number + 1)]), col_match]
require(grid)
require(readxl)
# 1. Load and rearrange data ----------------------------------------------
data_tennis <- read_xlsx("Data/MR-BO-2016.xlsx")
# Methodology:
# We have to start by making a function that will sort our data in an appropriate order before
# filling our graph. Why ? It's because our tournament tree is determined in advance so we
# have to place the matchs up in each round in the correct order.
# This part is a little tricky because the order of a given round will be determined by the
# data of the next round. In fact, the match up of the next round will tell us which match up
# have to be placed back to back.
data_1st <- data_tennis[which(data_tennis$ATP == 1),]
order_round <- c("1st Round", "2nd Round", "3rd Round", "4th Round", "Quarterfinals", "Semifinals", "The Final")
for (round in order_round) {
col_match <- which(names(data_1st) %in% c("Winner", "Loser"))
round_unique <- factor(unique(data_1st$Round), levels = order_round)
round_number <- which(round_unique == round)
order_prev_round <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))
data_ordered[[round_number]] <- data[which(data_1st$Round == round), ][order_prev_round]
}
round = "1st Round"
col_match <- which(names(data_1st) %in% c("Winner", "Loser"))
round_unique <- factor(unique(data_1st$Round), levels = order_round)
round_unique
round_number <- which(round_unique == round)
round_number
order_prev_round <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))
order_prev_round
which(data_1st$Round == round)
for (round in order_round) {
col_match <- which(names(data_1st) %in% c("Winner", "Loser"))
round_unique <- factor(unique(data_1st$Round), levels = order_round)
round_number <- which(round_unique == round)
order_prev_round <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))
data_ordered[[round_number]] <- data_1st[which(data_1st$Round == round), ][order_prev_round]
}
which(data_1st$Round == round)
data_1st[which(data_1st$Round == round), ]
[data_1st[which(data_1st$Round == round), ]
data_1st[which(data_1st$Round == round), ]
data_1st[which(data_1st$Round == round), ]$Winner
data_1st[which(data_1st$Round == round), ]$Winner
data_1st[which(data_1st$Round == round), ][data_1st[which(data_1st$Round == round), ]$Winner]
data_1st[which(data_1st$Round == round), ]$Winner
which(data_1st[which(data_1st$Round == round), ]$Winner == order_prev_round)
order_prev_round
data_1st[which(data_1st$Round == round)
data_1st[which(data_1st$Round == round), ]
data_1st[which(data_1st$Round == round), ]
order_prev_round
data_1st[which(data_1st$Round == round), ]
order_prev_round <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))
order_prev_round
require(dplyr)
data_1st[which(data_1st$Round == round), ]$Winner
order_prev_round <- semi_join(c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match])), data_1st[which(data_1st$Round == round), ]$Winner)
c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))
data.frame(c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match])))
data.frame(name = data_1st[which(data_1st$Round == round), ]$Winner)
order_prev_round <- semi_join(data.frame(name = c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))), data.frame(name = data_1st[which(data_1st$Round == round), ]$Winner))
order_prev_round <- semi_join(data.frame(name = c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))), data.frame(name = data_1st[which(data_1st$Round == round), ]$Winner), by = "name")
order_prev_round
data_ordered[[round_number]] <- data_1st[which(data_1st$Round == round), ][which(data_1st[which(data_1st$Round == round), ]$Winner == order_prev_round)]
data_ordered <- list(NA)
data_ordered
data_ordered[[round_number]] <- data_1st[which(data_1st$Round == round), ][which(data_1st[which(data_1st$Round == round), ]$Winner == order_prev_round)]
data_ordered
test <- data_ordered[[1]]
View(test)
which(data_1st[which(data_1st$Round == round), ]$Winner == order_prev_round)
data_1st[which(data_1st$Round == round), ]$Winner
order_prev_round
data.frame(name = c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)])
data.frame(name = c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match])))
data.frame(name = c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match])))
order_prev_round <- semi_join(data.frame(name = c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))), data.frame(name = data_1st[which(data_1st$Round == round), ]$Winner), by = "name")
order_prev_round
data_1st[which(data_1st$Round == round), ]
c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match])))
order_prev_round <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))")
order_prev_round
order_prev_round <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))
order_prev_round <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))
order_prev_round <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match])))
data_ordered[[round_number]] <- data_1st[which(data_1st$Round == round), ][which(data_1st[which(data_1st$Round == round), ]$Winner == order_prev_round)]
order_prev_round <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match])))
order_prev_round <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))
data_ordered[[round_number]] <- data_1st[which(data_1st$Round == round), ][which(data_1st[which(data_1st$Round == round), ]$Winner == order_prev_round)]
)
)
()
a
-
_
?jaja
1
)
require(grid)
require(readxl)
require(dplyr)
# 1. Load and rearrange data ----------------------------------------------
data_tennis <- read_xlsx("Data/MR-BO-2016.xlsx")
data_1st <- data_tennis[which(data_tennis$ATP == 1),]
order_round <- c("1st Round", "2nd Round", "3rd Round", "4th Round", "Quarterfinals", "Semifinals", "The Final")
data_ordered <- list(NA)
round = "1st Round"
col_match <- which(names(data_1st) %in% c("Winner", "Loser"))
round_unique <- factor(unique(data_1st$Round), levels = order_round)
round_number <- which(round_unique == round)
order_prev_round <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))
order_prev_round
players_bye <- anti_join(data.frame(Winner = players_next), data_1st[which(data_1st$Round == round), ]$Winner, by = "Winner")
players_next <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))
players_bye <- anti_join(data.frame(Winner = players_next), data_1st[which(data_1st$Round == round), ]$Winner, by = "Winner")
data.frame(Winner = players_next)
data_1st[which(data_1st$Round == round), ]$Winner
players_bye <- anti_join(data.frame(Winner = players_next), data_1st[which(data_1st$Round == round), ], by = "Winner")
players_bye
players_next
order_prev_round
players_next[-players_bye]
players_bye
players_next
players_bye
players_bye <- unlist(anti_join(data.frame(Winner = players_next), data_1st[which(data_1st$Round == round), ], by = "Winner"))
players_bye
players_bye <- unlist(anti_join(data.frame(Winner = players_next), data_1st[which(data_1st$Round == round), ], by = "Winner"), use.names = FALSE)
players_bye
players_bye <- as.charater(anti_join(data.frame(Winner = players_next), data_1st[which(data_1st$Round == round), ], by = "Winner"))
players_bye <- as.character(anti_join(data.frame(Winner = players_next), data_1st[which(data_1st$Round == round), ], by = "Winner"))
players_bye
players_bye <- as.character(unlist(anti_join(data.frame(Winner = players_next), data_1st[which(data_1st$Round == round), ], by = "Winner")))
players_bye
players_next[-players_bye]
players_bye
players_next
-players_bye
players_bye
players_next == players_bye)
which(players_next == players_bye)
players_next == players_bye
players_next
players_bye
class(players_bye)
class(players_next)
players_next == players_bye
players_next
players_bye
players_next %in% players_bye
players_next[-which(players_next %in% players_bye)]
data_ordered[[round_number]] <- data_1st[which(data_1st$Round == round), ][which(data_1st[which(data_1st$Round == round), ]$Winner == players_next[-which(players_next %in% players_bye)])]
test <- data_ordered[[1]]
View(test)
View(data_1st)
data_ordered[[round_number]] <- data_1st[which(data_1st$Round == round), ][which(data_1st[which(data_1st$Round == round), ]$Winner == players_next[-which(players_next %in% players_bye)]),]
test <- data_ordered[[1]]
View(test)
players_next[-which(players_next %in% players_bye)]
which(data_1st[which(data_1st$Round == round), ]$Winner == players_next[-which(players_next %in% players_bye)])
data_1st[which(data_1st$Round == round), ]$Winner
data_ordered[[round_number]] <- data_1st[which(data_1st$Round == round), ][which(data_1st[which(data_1st$Round == round), ]$Winner %in% players_next[-which(players_next %in% players_bye)]),]
test <- data_ordered[[1]]
View(test)
which(data_1st[which(data_1st$Round == round), ]$Winner %in% players_next[-which(players_next %in% players_bye)])
players_next[-which(players_next %in% players_bye)]
data_1st[which(data_1st$Round == round), ]$Winner
?order
players_next[-which(players_next %in% players_bye)]
test <- order(data_1st[which(data_1st$Round == round), ], players_next[-which(players_next %in% players_bye)])
data_1st[which(data_1st$Round == round), ]$Winner
which(players_next[-which(players_next %in% players_bye)] == data_1st[which(data_1st$Round == round), ]$Winner)
which(players_next[-which(players_next %in% players_bye)] %in% data_1st[which(data_1st$Round == round), ]$Winner))
which(players_next[-which(players_next %in% players_bye)] %in% data_1st[which(data_1st$Round == round), ]$Winner)
order(players_next[-which(players_next %in% players_bye)], data_1st[which(data_1st$Round == round), ]$Winner)
test <- data_1st[which(data_1st$Round == round), ][order(players_next[-which(players_next %in% players_bye)], data_1st[which(data_1st$Round == round), ]$Winner)),]
test <- data_1st[which(data_1st$Round == round), ][order(players_next[-which(players_next %in% players_bye)], data_1st[which(data_1st$Round == round), ]$Winner),]
test
View(test)
players_next
order(players_next[-which(players_next %in% players_bye)], data_1st[which(data_1st$Round == round), ]$Winner)
round = "2nd Round"
col_match <- which(names(data_1st) %in% c("Winner", "Loser"))
round_unique <- factor(unique(data_1st$Round), levels = order_round)
round_number <- which(round_unique == round)
round_number
players_next <- c(t(data_1st[which(data_1st$Round == round_unique[(round_number + 1)]), col_match]))
players_next
players_bye
players_bye <- as.character(unlist(anti_join(data.frame(Winner = players_next), data_1st[which(data_1st$Round == round), ], by = "Winner")))
players_bye
vp <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
require(grid)
require(readxl)
require(dplyr)
data_tennis <- read_xlsx("Data/MR-BO-2016.xlsx")
data_1st <- data_tennis[which(data_tennis$ATP == 1),]
order_round <- c("1st Round", "2nd Round", "3rd Round", "4th Round", "Quarterfinals", "Semifinals", "The Final")
vp <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
vp <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp)
vp <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp)
grid.rect(gp = gpar(tly = "dashed"))
grid.rect(gp = gpar(lty = "dashed"))
vp <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp)
vp <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp)
grid.rect(gp = gpar(lty = "dashed"))
vp <- viewport(x = 0.5, y = 0.5, width = 1, height = 1)
vp <- viewport(x = 0.5, y = 0.5, width = 1, height = 1)
pushViewport(vp)
grid.rect(gp = gpar(lty = "dashed"))
vp <- viewport(x = 0.5, y = 0.5, width = 0.95, height = 0.95)
pushViewport(vp)
grid.rect(gp = gpar(lty = "dashed"))
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- unique(data_1st$Round)
nb_round
nb_round <- length(unique(data_1st$Round))
nb_round
0.9/(nb_round + 1)
sapply(1:nb_round, FUN = function(x) {0.9 - x * (0.9/nb_round)})
sapply(X = 1:nb_round, FUN = function(x) {0.9 - x * (0.9/nb_round)})
sapply(X = 1:nb_round, FUN = function(x) {0.9 - x * (0.9/nb_round + 1)})
sapply(X = 1:nb_round, FUN = function(x) {0.9 - x * (0.9/(nb_round + 1))})
k = 1
(1 + 2 * (n-1))/2^k)
(1 + 2 * (n-1))/2^k
(1 + 2 * (n-1))/ 2^k
2^k
(1 + 2 * (n-1))
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (k - 1))/ 2^k)
(1 + 2 * (k - 1))/ 2^k
(1 + 2 * (k - 1))/ 2^k
k = 2
(1 + 2 * (k - 1))/ 2^k
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
for (k in 1:nb_round) {
for (n in 1:k) {
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
}
}
k = 1
n = 1
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
k = 2
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
n = 2
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
k = 3
n = 1
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
n = 2
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
n = 3
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
k = 1
n = 1
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
k = 2
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
n = 2
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
k = 0
n = 1
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^n, width = 0.05, height = 0.05)
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^n, width = 0.05, height = 0.05)
k = 1
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^n, width = 0.05, height = 0.05)
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
for (k in 0:(nb_round - 1)) {
for (n in 1:2^k) {
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
}
}
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
for (k in 1:(nb_round - 1)) {
for (n in 1:2^k) {
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
}
}
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
for (k in 1:nb_round) {
for (n in 1:2^k) {
grid.rect(x = 0.9 - k * (0.9/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
}
}
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
for (k in 1:nb_round) {
for (n in 1:2^k) {
grid.rect(x = 1 - k * (1/(nb_round + 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
}
}
sapply(X = 1:nb_round, FUN = function(x) {0.9 - x * (0.9/(nb_round + 1))})
sapply(X = 0:nb_round, FUN = function(x) {0.9 - x * (0.9/(nb_round + 1))})
sapply(X = 0:nb_round, FUN = function(x) {0.9 - x * (0.9/(nb_round))})
options(scipen = 999)
sapply(X = 0:nb_round, FUN = function(x) {0.9 - x * (0.9/(nb_round))})
sapply(X = 0:nb_round-1, FUN = function(x) {0.9 - x * (0.9/(nb_round))})
sapply(X = 0:(nb_round-1), FUN = function(x) {0.9 - x * (0.9/(nb_round))})
sapply(X = 0:(nb_round), FUN = function(x) {0.9 - x * (0.9/(nb_round))})
sapply(X = 0:(nb_round + 1), FUN = function(x) {0.9 - x * (0.9/(nb_round))})
0.9/(nb_round + 1)
sapply(X = 0:(nb_round - 1), FUN = function(x) {0.9 - x * (0.9/(nb_round + 1))})
sapply(X = 0:(nb_round - 1), FUN = function(x) {0.9 - x * (0.9/(nb_round - 1))})
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
for (k in 0:(nb_round - 1)) {
for (n in 1:2^k) {
grid.rect(x = 1 - k * (1/(nb_round - 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
}
}
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
for (k in 0:(nb_round - 1)) {
for (n in 1:k) {
grid.rect(x = 1 - k * (1/(nb_round - 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
}
}
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
for (k in 1:(nb_round - 1)) {
for (n in 1:k) {
grid.rect(x = 1 - k * (1/(nb_round - 1)), y = (1 + 2 * (n - 1))/ 2^k, width = 0.05, height = 0.05)
}
}
sapply(X = 1:(nb_round - 1), FUN = function(x) {0.9 - x * (0.9/(nb_round - 1))})
sapply(X = 1:(nb_round), FUN = function(x) {0.9 - x * (0.9/(nb_round - 1))})
sapply(X = 0:(nb_roundx), FUN = function(x) {0.9 - x * (0.9/(nb_round - 1))})
sapply(X = 0:(nb_round), FUN = function(x) {0.9 - x * (0.9/(nb_round - 1))})
sapply(X = 0:(nb_round - 1), FUN = function(x) {0.9 - x * (0.9/(nb_round - 1))})
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
for (k in 0:(nb_round - 1)) {
for (n in 1:2^k) {
grid.rect(x = 1 - k * (1/(nb_round - 1)), y = (1 + 2 * (n - 1))/ 2^(k+1), width = 0.05, height = 0.05)
}
}
data_1st <- data_tennis[which(data_tennis$ATP == 2),]
nb_round <- length(unique(data_1st$Round))
nb_round
data_1st <- data_tennis[which(data_tennis$ATP == 4),]
nb_round <- length(unique(data_1st$Round))
nb_round
data_1st <- data_tennis[which(data_tennis$ATP == 3),]
nb_round <- length(unique(data_1st$Round))
nb_round
data_1st <- data_tennis[which(data_tennis$ATP == 5),]
nb_round <- length(unique(data_1st$Round))
nb_round
data_1st <- data_tennis[which(data_tennis$ATP == 6),]
nb_round <- length(unique(data_1st$Round))
nb_round
for (k in 0:(nb_round - 1)) {
for (n in 1:2^k) {
grid.rect(x = 1 - k * (1/(nb_round - 1)), y = (1 + 2 * (n - 1))/ 2^(k+1), width = 0.05, height = 0.05)
}
}
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
for (k in 0:(nb_round - 1)) {
for (n in 1:2^k) {
grid.rect(x = 1 - k * (1/(nb_round - 1)), y = (1 + 2 * (n - 1))/ 2^(k+1), width = 0.01, height = 0.01)
}
}
data_1st <- data_tennis[which(data_tennis$ATP == 1),]
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
for (k in 0:(nb_round - 1)) {
for (n in 1:2^k) {
grid.rect(x = 1 - k * (1/(nb_round - 1)), y = (1 + 2 * (n - 1))/ 2^(k+1), width = 0.01, height = 0.01)
}
}
vp_contour <- viewport(x = 0.5, y = 0.5, width = 0.9, height = 0.9)
pushViewport(vp_contour)
nb_round <- length(unique(data_1st$Round))
for (k in 0:(nb_round - 1)) {
for (n in 1:2^k) {
grid.rect(x = 1 - k * (1/(nb_round - 1)), y = (1 + 2 * (n - 1))/ 2^(k+1), width = 0.01, height = 0.01)
}
}
nb_set <- data_1st$`Best of`
nb_set
nb_set <- data_1st$`Best of`[1]
nb_set
